broadcaster.sendTransform(odom_trans);
	
	ss.str("");	
	ss<<"front_laser_gui";	
	//ss<<"carrot";
	myChildFrame.data=ss.str();
	odom_trans.child_frame_id = myChildFrame.data.c_str();
	ROS_INFO("Broadcasting this as TF from frame ID: [%s] to frame ID: [%s]",myParentFrame.data.c_str(), myChildFrame.data.c_str());
	broadcaster.sendTransform(odom_trans);

	ss.str("");	
	ss<<"base_link";	
	//ss<<"carrot";
	myChildFrame.data=ss.str();
	odom_trans.child_frame_id = myChildFrame.data.c_str();
	ROS_INFO("Broadcasting this as TF from frame ID: [%s] to frame ID: [%s]",myParentFrame.data.c_str(), myChildFrame.data.c_str());
	broadcaster.sendTransform(odom_trans);

myDeltaX=myLastX-msg->pose.pose.position.x;
myDeltaY=myLastY-msg->pose.pose.position.y;
myDeltaZ=myLastZ-msg->pose.pose.position.z;

myDeltaTheta=myLastTheta-msg->pose.pose.orientation.z;
myLastX=msg->pose.pose.position.x;
myLastY=msg->pose.pose.position.y;
myLastZ=msg->pose.pose.position.z;
myLastTheta=msg->pose.pose.orientation.z;

/*
odom_trans.transform.translation.x = myDeltaX;
    odom_trans.transform.translation.y = myDeltaY;
    odom_trans.transform.translation.z = myDeltaZ;
odom_quat = tf::createQuaternionMsgFromYaw(myDeltaTheta);
    odom_trans.transform.rotation = odom_quat;
*/

	ss.str("");	
	ss<<"/front_laser";			
	myParentFrame.data=ss.str();
	odom_trans.header.frame_id = myParentFrame.data.c_str();
	ss.str("");	
	ss<<"odom_combined";	
	myChildFrame.data=ss.str();
	odom_trans.child_frame_id = myChildFrame.data.c_str();
	ROS_INFO("Broadcasting this as TF from frame ID: [%s] to frame ID: [%s]",myParentFrame.data.c_str(), myChildFrame.data.c_str());
broadcaster.sendTransform(odom_trans);

	ss.str("");	
	ss<<"odom_combined";			
	myParentFrame.data=ss.str();
	odom_trans.header.frame_id = myParentFrame.data.c_str();
	ss.str("");	
	ss<<"base_link";	
	myChildFrame.data=ss.str();
	odom_trans.child_frame_id = myChildFrame.data.c_str();
	//odom_trans.transform.translation.x=-odom_trans.transform.translation.x;
  //odom_trans.transform.translation.y=-odom_trans.transform.translation.y;
  //odom_trans.transform.translation.z=-odom_trans.transform.translation.z;
	//odom_quat = tf::createQuaternionMsgFromYaw(-msg->pose.pose.orientation.z);
  //odom_trans.transform.rotation = odom_quat;
	ROS_INFO("Broadcasting this as TF from frame ID: [%s] to frame ID: [%s]",myParentFrame.data.c_str(), myChildFrame.data.c_str());

	//if (!myCreatedOdo) 
	//{
	//broadcaster.sendTransform(odom_trans);
	//fprintf(stderr,"Generating odom_combined once..");
	//myCreatedOdo=true;
	//}
/*
tf::Transform transform;
transform.setOrigin( tf::Vector3(msg->pose.pose.position.x, msg->pose.pose.position.y, msg->pose.pose.position.z) );
    transform.setRotation( tf::Quaternion(msg->pose.pose.orientation.x, msg->pose.pose.orientation.y, msg->pose.pose.orientation.z, 1) );
//broadcaster.sendTransform(tf::StampedTransform(transform, ros::Time::now(), msg->child_frame_id.c_str(),msg->header.frame_id.c_str()));
broadcaster.sendTransform(tf::StampedTransform(transform, ros::Time::now(), myParentFrame.data.c_str(),myChildFrame.data.c_str()));
*/
/*
broadcaster.sendTransform(
      tf::StampedTransform(
        tf::Transform(tf::Quaternion(0, 0, 0, 1), tf::Vector3(0.1, 0.0, 0.2)),
        //ros::Time::now(),msg->header.frame_id.c_str(), msg->child_frame_id.c_str()));
				ros::Time::now(),msg->header.frame_id.c_str(), "carrot"));



*/

